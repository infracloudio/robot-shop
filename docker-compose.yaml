version: '3'
services:
  mongodb:
    build:
      context: mongo
    image: ${REPO}/rs-mongodb:${TAG}
    networks:
      - robot-shop
    logging: &logging
      driver: "json-file"
      options:
        max-size: "25m"
        max-file: "2"
  redis:
    image: redis:6.2-alpine
    ports:
      - "9121:9121"
    networks:
      - robot-shop
    logging:
      <<: *logging
  rabbitmq:
    image: rabbitmq:3.12
    ports:
      - "15692:15692"
    networks:
      - robot-shop
    logging:
      <<: *logging
  catalogue:
    build:
      context: catalogue
    image: ${REPO}/rs-catalogue:${TAG}
    depends_on:
      - mongodb
    networks:
      - robot-shop
    environment:
      DD_AGENT_HOST: "agent"
      DD_ENV: "development"
      DD_SERVICE: "catalogue"
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8080/health" ]
      interval: 10s
      timeout: 10s
      retries: 3
    logging:
      <<: *logging
  user:
    build:
      context: user
    image: ${REPO}/rs-user:${TAG}
    depends_on:
      - mongodb
      - redis
    networks:
      - robot-shop
    environment:
      DD_AGENT_HOST: "agent"
      DD_ENV: "development"
      DD_SERVICE: "user"
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8080/health" ]
      interval: 10s
      timeout: 10s
      retries: 3
    logging:
      <<: *logging
  cart:
    build:
      context: cart
    image: ${REPO}/rs-cart:${TAG}
    depends_on:
      - redis
      - catalogue
    networks:
      - robot-shop
    environment:
      DD_AGENT_HOST: "agent"
      DD_ENV: "development"
      DD_SERVICE: "cart"
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8080/health" ]
      interval: 10s
      timeout: 10s
      retries: 3
    logging:
      <<: *logging
  mysql:
    image: mysql:8
    environment:
      - MYSQL_ROOT_PASSWORD=superdba
      - MYSQL_DATABASE=cities
      - MYSQL_USER=shipping
      - MYSQL_PASSWORD=secret
    cap_add:
      - NET_ADMIN
    networks:
      - robot-shop
    logging:
      <<: *logging
  loader:
    build:
      context: mysql-loader
    image: ${REPO}/rs-loader:${TAG}
    environment:
      - MYSQL_ROOT_PASSWORD=superdba
    depends_on:
      - mysql
    networks:
      - robot-shop
    logging:
      <<: *logging
  shipping:
    build:
      context: shipping
    image: ${REPO}/rs-shipping:${TAG}
    command:
      - java
      - -XX:MaxRAMPercentage=75.0
      - -javaagent:dd-java-agent.jar
      - -jar
      - shipping.jar
    depends_on:
      - mysql
    networks:
      - robot-shop
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 10s
      timeout: 10s
      retries: 3
    environment:
      DD_AGENT_HOST: "agent"
      DD_ENV: "development"
      DD_SERVICE: "shipping"
      DD_INSTRUMENTATION_TELEMETRY_ENABLED: "false"
    logging:
      <<: *logging
  ratings:
    build:
      context: ratings
    image: ${REPO}/rs-ratings:${TAG}
    environment:
      APP_ENV: prod
      DD_AGENT_HOST: "agent"
      DD_ENV: "development"
      DD_SERVICE: "ratings"
    networks:
      - robot-shop
    depends_on:
      - mysql
      - catalogue
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/_health"]
      interval: 10s
      timeout: 10s
      retries: 3
    logging:
      <<: *logging
  payment:
    build:
      context: payment
    image: ${REPO}/rs-payment:${TAG}
    depends_on:
      - rabbitmq
    networks:
      - robot-shop
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 10s
      timeout: 10s
      retries: 3
    # Uncomment to change payment gateway
    environment:
      #PAYMENT_GATEWAY: "https://www.worldpay.com"
      DD_AGENT_HOST: "agent"
      DD_ENV: "development"
      DD_SERVICE: "payment"
    logging:
      <<: *logging
  dispatch:
    build:
      context: dispatch
    image: ${REPO}/rs-dispatch:${TAG}
    depends_on:
      - rabbitmq
      - mongodb
    networks:
      - robot-shop
    environment:
      DD_AGENT_HOST: "agent"
      DD_ENV: "development"
      DD_SERVICE: "dispatch"
    logging:
      <<: *logging
  web:
    build:
      context: web
    image: ${REPO}/rs-web:${TAG}
    depends_on:
      - catalogue
      - user
      - shipping
      - payment
    ports:
      - "8080:8080"
    networks:
      - robot-shop
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8080/" ]
      interval: 10s
      timeout: 10s
      retries: 3
    logging:
      <<: *logging
  agent:
    image: datadog/agent:latest
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - /proc/:/host/proc/:ro
      - /sys/fs/cgroup/:/host/sys/fs/cgroup:ro
    environment:
      - DD_API_KEY=${DD_API_KEY}
      - DD_APM_ENABLED=true
    ports:
      - 127.0.0.1:8126:8126
    networks:
      - robot-shop

networks:
  robot-shop:

